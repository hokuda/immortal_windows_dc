---
- hosts: localhost
  #gather_facts: no
  become: False
#  vars_files:
#    - ./settings.yml

  tasks:

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Get Subnet ID'
      ec2_vpc_subnet_info:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        filters:
          "tag:Name": "{{ subnet.name }}"
        region: "{{ region }}"
      register: _subnet_info
    - debug: var=_subnet_info  verbosity=1

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Get Security Group ID'
      amazon.aws.ec2_group_info:
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        filters:
          group_name: "{{ security_group.name }}"
        region: "{{ region }}"
      register: _group_info
    - debug: var=_group_info  verbosity=1

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Launch Windows Instance on EC2'
      ec2_instance:
        access_key: "{{ access_key }}"
        secret_key: "{{ secret_key }}"
        wait: true
        key_name: "{{ keyname }}"
        image_id: "{{ image_id }}"
        security_group: "{{ _group_info.security_groups[0].group_id }}"
        instance_type: "{{ instance_type }}"
        name: "{{ ec2.instance_name }}-{{ ansible_date_time.epoch }}"
        region: "{{ region }}"
        user_data: |
          <powershell>
          $url = "https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"
          $file = "$env:temp\ConfigureRemotingForAnsible.ps1"
          (New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)
          powershell.exe -ExecutionPolicy ByPass -File $file
          </powershell>
        vpc_subnet_id: "{{ _subnet_info.subnets[0].subnet_id }}"
        network:
          assign_public_ip: true
      register: _instance
    - debug: var=_instance verbosity=1

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Decrypt the Administrator password'
      ec2_win_password:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        instance_id: "{{ _instance.instances[0].instance_id }}"
        region: "{{ region }}"
        key_file: "{{ keypath }}"
        wait: yes
        wait_timeout: 600
      register: _win
    - debug: var=_win verbosity=1

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Get EC2 instace info'
      ec2_instance_info:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        instance_ids: [ "{{ _instance.instances[0].instance_id }}" ]
        region: "{{ region }}"
      register: _ec2_instance_info
    - debug: var=_ec2_instance_info  verbosity=1
      
    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Add a new instance to host group'
      add_host:
        hostname: "{{ _ec2_instance_info.instances[0].public_ip_address }}"
        groupname: "launched"
        ansible_user: Administrator
        ansible_password: "{{ _win.win_password }}"
        ansible_winrm_transport: ntlm
        ansible_winrm_server_cert_validation: ignore

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Output the server info to the json file'
      vars:
        _server_info:
          instance: "{{ _ec2_instance_info.instances[0] }}"
          password: "{{ _win.win_password }}"
        server_info_path: "{{ _ec2_instance_info.instances[0].tags.Name }}.json"
      local_action: copy content="{{ _server_info }}" dest="{{ server_info_path }}"

- hosts: launched
  gather_facts: no
  connection: winrm

  tasks:

    - name: 'pause 2 min'
      pause:
        seconds: 120

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Install WindowsFeature of AD-Domain-Services'
      #win_shell: Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools
      win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
#      win_feature:
#        name: DNS
#        include_management_tools: yes

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Promote the server to domain controller'
      #win_shell: Install-ADDSForest -DomainName "EXAMPLE.COM" -SafeModeAdministratorPassword (ConvertTo-SecureString -String Passw0rd. -AsPlainText -Force) -InstallDns:$false -NoRebootOnCompletion:$false -Force:$true
      #win_shell: Install-ADDSForest -DomainName "EXAMPLE.COM" -SafeModeAdministratorPassword (ConvertTo-SecureString -String Passw0rd. -AsPlainText -Force) -InstallDns:$false -NoRebootOnCompletion:$true -Force:$true
      win_domain:
        dns_domain_name: "{{ ad.domain_name }}"
        safe_mode_password: "{{ ad.password }}"
        install_dns: no
      register: dc_promotion
      
    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Reboot after promotion'
      win_reboot:
      when: dc_promotion.reboot_required

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} pause 2 min'
      pause:
        seconds: 120

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Install WindowsFeature of DNS'
      win_feature:
        name: DNS
        include_management_tools: yes

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Wait for WinRM connection just after reboot to ensure WinRM gets started'
      wait_for_connection:
        timeout: 600
        sleep: 30
      ignore_errors: yes

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Wait for LDAP just in case'
      win_wait_for:
        port: 389
      ignore_errors: yes

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} pause 4 min'
      pause:
        seconds: 240

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Add a service account'
      #win_shell: New-ADUser -Name "spnego.example.com" -Path "CN=Users,DC=EXAMPLE,DC=COM" -AccountPassword (ConvertTo-SecureString -String Passw0rd. -AsPlainText -Force) -Enabled $true
      #win_user:
      #  name: "{{ ad.host_name }}"
      #  password: "{{ ad.password }}"
      #  password_never_expires: yes
      #  profile: "{{ ad.users_base_dn }}"
      # not able to enable AES with win_user, hence, move to win_domain_user
      # ref: https://learn.microsoft.com/ja-jp/troubleshoot/windows-server/identity/useraccountcontrol-manipulate-account-properties
      
      win_domain_user:
        name: "{{ ad.host_name }}"
        password: "{{ ad.password }}"
        password_never_expires: yes
        path: "{{ ad.users_base_dn }}"
        state: present
        attributes:
          msDS-SupportedEncryptionTypes: 24

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Create a keytab file against spnego.example.com user'
      win_shell: ktpass -princ {{ ad.service_principal_name }} -mapuser {{ ad.host_name }}@{{ ad.domain_name }} -pass {{ ad.password }} -out {{ ad.keytab_path }} -kvno 0 -ptype KRB5_NT_PRINCIPAL -crypto all

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Download a keytab file'
      #become_method: runas
      fetch:
        src: "{{ ad.keytab_path }}"
        dest: "./{{ hostvars['localhost']._ec2_instance_info.instances[0].tags.Name }}.keytab"
        flat: yes

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Add group'
      #win_shell: New-ADGroup "{{ ad.group_name }}" -Path "{{ ad.users_base_dn }}"  -GroupCategory Security -GroupScope Global -PassThru â€“Verbose
      win_group:
        name: "{{ ad.group_name }}"

    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Add user'
      #win_shell: New-ADUser -Name "user1" -Path "CN=Users,DC=EXAMPLE,DC=COM" -AccountPassword (ConvertTo-SecureString -String Passw0rd. -AsPlainText -Force) -Enabled $true
      #win_user:
      #  name: "{{ ad.user_name }}"
      #  password: "{{ ad.password }}"
      #  password_never_expires: yes
      #  profile: "{{ ad.users_base_dn }}"
      #  #path: "{{ ad.users_base_dn }}"
      #  #groups: ["{{ ad.group_name }}"]
      # not able to enable AES with win_user, hence, move to win_domain_user
      # ref: https://learn.microsoft.com/ja-jp/troubleshoot/windows-server/identity/useraccountcontrol-manipulate-account-properties

      win_domain_user:
        name: "{{ ad.user_name }}"
        password: "{{ ad.password }}"
        password_never_expires: yes
        path: "{{ ad.users_base_dn }}"
        state: present
        attributes:
          msDS-SupportedEncryptionTypes: 24


    - name: '{{ lookup(''pipe'', ''date "+%Y/%m/%d %H:%M:%S"'') }} Add membership'
      #win_shell: Add-ADGroupMember -Identity group1 -Members user1
      win_group_membership:
        name: "{{ ad.group_name }}"
        members:
          - "{{ ad.user_name }}@{{ ad.domain_name }}"
